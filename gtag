#!/bin/bash
# created by: Zell
#===============================================================================
# variables

#---------------------------------------
# source file

source /usr/local/sbin/zellib

#---------------------------------------
# custom values


#===============================================================================
# help text

HELP_TXT="
This script runs:
  # git add .
  # git commit -m \"<comment>\"
  # git tag -a \"<tag>\" -m \"<comment>\"

SYNTAX:
  # $PROG [OPTIONS]

$HELP_TXT_OPTIONS

$HELP_TXT_EXAMPLES

$HELP_TXT_NOTES

"

#===============================================================================
# functions

#---------------------------------------

#===============================================================================
# script start

#---------------------------------------
# preset variables (optional)

VERBOSE=true
SKIP=true

#---------------------------------------
# process options

f_process_custom_options () {
while (( "$#" > 0 )) ;do
  case $1 in
    *)  f_msg -e "Unknown option(s): $INITARGS" ;break  ;;
  esac
done
}

INITARGS=$@
f_process_options $INITARGS
f_process_custom_options $REMAINARGS

#---------------------------------------
# arguments

f_msg -l -d "SCRIPT START"
f_arguments

#---------------------------------------
# error checks

#f_vroot   # verify root execution
f_prompt  # prompt for execution
if [[ ! -d ./.git ]] ;then
  f_msg -e "Git has not been initialized here: `pwd`"
fi

#===============================================================================
# body

#---------------------------------------
# display git info

f_run "gitty"

#---------------------------------------
# comment prompt

read -p "
Enter a comment to use for the commit and tag.
[comment]: " COMMENT

#---------------------------------------
# tag prompt

echo ""
f_msg "Printing the top 10 most recent tags..."
#f_run "git tag -l |sort -r |head"  # old method
f_run "git log --all --oneline --decorate |grep tag: |awk -F'(' '{print $2}' |awk -F')' '{print $1}' |head"

read -p "
Enter an annotated tag.
[tag]: " TAG

#---------------------------------------
# git add, commit, & tag

# git commit
f_msg "Committing with comment: $COMMENT"
f_run "git add . ;git commit -am \"$COMMENT\""

# git tag
f_msg "Adding tag ($TAG) with comment: $COMMENT"
f_run "git tag -a \"$TAG\" -m \"$COMMENT\""

#---------------------------------------
# push prompt

BRANCH=`git branch |grep ^\* |awk '{print $2}'`

read -p "
Do you want to push changes to a remote?
[(y)es, (n)o]: " ANSWER

case $ANSWER in
  y|yes)
    # remote prompt
    COUNT=`git remote |wc -l |xargs`
    LISTNUM=`git remote |sort |cat -n |column -t`

    if [[ $COUNT -lt 1 ]] ;then            # error check
      f_msg -e "No remotes to work with!"
    elif [[ $COUNT == 1 ]] ;then           # skip prompt if only one choice available
      REMOTE=`git remote`
    else
      read -p "
`echo "$LISTNUM" |column -t`

Which remote do you want to use?
[1-$COUNT, (q)uit]: " ANSWER

      # error checking
      if [[ $ANSWER == q ]] || [[ $ANSWER == quit ]] ;then
        f_exit
      elif [[ $ANSWER -lt 1 ]] || [[ $ANSWER -gt $COUNT ]] ;then
        f_msg -e -d "invalid selection"
      fi

      # set remote
      REMOTE=`echo "$LISTNUM" |grep "^$ANSWER\ " |awk '{print $2}' |awk '{print $1}'`
    fi
    f_msg "Pushing changes to origin..."  # push changes
    f_run "git push $REMOTE $BRANCH"
    f_msg "Pushing tags to origin..."     # push tags
    f_run "git push $REMOTE --tags"
    ;;
  n|no)  f_msg "Continuing without pushing changes..."  ;;
  *)     f_msg -e "Unknown option(s): $ANSWER"           ;;
esac

#===============================================================================
# cleanup

f_logro  # rotate log
f_exit   # exit script
